apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: cyclic-peptide-inference-
spec:
  arguments:
    parameters:
    - name: extra-args
    - name: jobname
    - name: output-gcs-path
  entrypoint: cyclic-peptide-inference
  volumes:
  - name: alphafold-data
    persistentVolumeClaim:
      claimName: alphafold-data-pvc
      readOnly: true

  templates:
    - name: cyclic-peptide-inference
      inputs:
        artifacts:
          - name: sequence
            path: /sequence.fasta
            gcs:
              bucket: alphafold-inference
              key: "{{workflow.parameters.output-gcs-path}}/sequence.fasta"
        parameters:
          - name: extra-args
          - name: jobname
      outputs:
        artifacts:
          - name: results
            path: /results
            gcs:
              bucket: alphafold-inference
              key: "{{workflow.parameters.output-gcs-path}}/results.tgz"
      script:
        image: gcr.io/ddag-gke/psp/stages/stage1:latest
        command: [bash]
        source: |
          source activate psp
          pip install -q --no-warn-conflicts 'colabfold[alphafold-minus-jax] @ git+https://github.com/sokrypton/ColabFold'
          pip install --upgrade dm-haiku
          ln -s /usr/local/lib/python3.*/dist-packages/colabfold colabfold
          ln -s /usr/local/lib/python3.*/dist-packages/alphafold alphafold
          sed -i 's/weights = jax.nn.softmax(logits)/logits=jnp.clip(logits,-1e8,1e8);weights=jax.nn.softmax(logits)/g' alphafold/model/modules.py
          sed -i 's/class EmbeddingsAndEvoformer(hk.Module):/def get_cyclic_offset(idx, protocol='just_peptide', bug_fix=True):\n  import numpy as np\n  '''add cyclic offset to connect N and C term'''\n  def cyclic_offset(L):\n    i = np.arange(L)\n    ij = np.stack([i,i+L],-1)\n    offset = i[:,None] - i[None,:]\n    c_offset = np.abs(ij[:,None,:,None] - ij[None,:,None,:]).min((2,3))\n    if bug_fix:\n      a = c_offset < np.abs(offset)\n      c_offset[a] = -c_offset[a]\n    return c_offset * np.sign(offset)\n  offset = idx[:,None] - idx[None,:]\n\n  if protocol == 'just_peptide':\n    offset = cyclic_offset(len(idx))\n\n  if protocol == 'binder':\n    c_offset = cyclic_offset(self._binder_len)\n    offset[self._target_len:,self._target_len:] = c_offset\n\n  elif protocol in ['fixbb','partial','hallucination']:\n    Ln = 0\n    for L in self._lengths:\n      offset[Ln:Ln+L,Ln:Ln+L] = cyclic_offset(L)\n      Ln += L\n\n  return offset\n\nclass EmbeddingsAndEvoformer(hk.Module):/g' alphafold/model/modules.py
          sed -i 's/offset = pos[:, None] - pos[None, :]/offset = get_cyclic_offset(pos)\nprint(offset)/g' alphafold/model/modules.py
          mkdir -p /results
          python3 colabfold/batch.py \
            /sequence.fasta \
            /results \
            {{inputs.parameters.extra-args}}
        resources:
          requests:
            memory: 60Gi
            cpu: 7000m
          limits:
            nvidia.com/gpu: 1
        volumeMounts:
        - name: alphafold-data
          mountPath: /mnt
          readOnly: true